# **Importing the Dataset in Google Colab**

from google.colab import files
upload = files.upload()

# **Importing Python Packages**

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# **Loading the data**

columns = ['Sepal length', 'Sepal width', 'Petal length', 'Petal width', 'Class_labels'] 
df = pd.read_csv("/content/iris.data", names=columns)
df.head()

# **Statistical analysis of data**

df.describe()

df.info()

# **Visualizing the dataset**

sns.pairplot(df, hue='Class_labels')

# **Separating features and target values**

data = df.values
X = data[:,0:4]
Y = data[:,4]

# **Calculating average of each features**

Y_Data = np.array([np.average(X[:, i][Y==j].astype('float32')) for i in range (X.shape[1])
 for j in (np.unique(Y))])
Y_Data_reshaped = Y_Data.reshape(4, 3)
Y_Data_reshaped = np.swapaxes(Y_Data_reshaped, 0, 1)
X_axis = np.arange(len(columns)-1)
width = 0.25

# **Ploting The Average**

plt.bar(X_axis+width, Y_Data_reshaped[1], width, label = 'Versicolour')
plt.bar(X_axis+width*2, Y_Data_reshaped[2], width, label = 'Virginica')
plt.xticks(X_axis, columns[:4])
plt.xlabel("Features")
plt.ylabel("Value in cm.")
plt.legend(bbox_to_anchor=(1.3,1))
plt.show()

# **Spliting the data into train and test dataset**

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)

# **Implementing Support Vector Machine**

from sklearn.svm import SVC
svn = SVC()
svn.fit(X_train, y_train)

# **Prediction from Test dataset**

predictions = svn.predict(X_test)
from sklearn.metrics import accuracy_score
#Finding Accuracy
accuracy_score(y_test, predictions)

# **Prediction of the Species from Input Vector**

X_new = np.array([[3, 2, 1, 0.2], [  4.9, 2.2, 3.8, 1.1 ], [  5.3, 2.5, 4.6, 1.9 ]])
prediction = svn.predict(X_new)
print("Prediction of Species: {}".format(prediction))

# **Loading and Saving of the model**

import pickle                                #Saving the Model
with open('SVM.pickle', 'wb') as f:
    pickle.dump(svn, f)

with open('SVM.pickle', 'rb') as f:          #Loading the Model
    model = pickle.load(f)
model.predict(X_new)
